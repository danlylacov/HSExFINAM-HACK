#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /predict —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
"""

import subprocess
import json
import sys
from collections import defaultdict

def test_multiple_tickers_v2():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /predict (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã)")
    print("=" * 80)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º curl –∑–∞–ø—Ä–æ—Å
    try:
        result = subprocess.run([
            'curl', '-X', 'POST', 'http://localhost:8009/predict',
            '-H', 'Content-Type: application/json',
            '-d', '@test_multiple_tickers.json',
            '--max-time', '60',  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
            '-w', '\nHTTP Status: %{http_code}\nTotal Time: %{time_total}s\n',
            '--silent'
        ], capture_output=True, text=True, cwd='/home/daniil/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/FINAM_HACK/price-forecast-back')
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ curl: {result.stderr}")
            return False
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        output_lines = result.stdout.strip().split('\n')
        json_response = '\n'.join(output_lines[:-2])  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        metadata = output_lines[-2:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        
        try:
            response_data = json.loads(json_response)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"–û—Ç–≤–µ—Ç: {json_response}")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = response_data.get('results', [])
        
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {len(results)}")
        print(f"üìà –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata[0]}, {metadata[1]}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open('test_multiple_tickers.json', 'r') as f:
            input_data = json.load(f)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
        ticker_data = defaultdict(list)
        for record in input_data['params']:
            ticker_data[record['ticker']].append(record)
        
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(input_data['params'])}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {len(ticker_data)}")
        
        for ticker_name, records in ticker_data.items():
            print(f"   {ticker_name}: {len(records)} –∑–∞–ø–∏—Å–µ–π")
            last_record = records[-1]
            print(f"     –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {last_record['close']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å —Ç–∏–∫–µ—Ä–æ–≤: {len(ticker_data)}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
        if len(results) == len(ticker_data):
            print("   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–∏–∫–µ—Ä–æ–≤")
        else:
            print("   ‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–∏–∫–µ—Ä–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for i, result in enumerate(results):
            ticker = result['ticker']
            returns = result['returns']
            
            print(f"\nüìà –¢–∏–∫–µ—Ä {i+1}: {ticker}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π: {len(returns)}")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {min(returns):.6f} ({min(returns)*100:.2f}%)")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {max(returns):.6f} ({max(returns)*100:.2f}%)")
            print(f"   –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {sum(returns)/len(returns):.6f} ({sum(returns)/len(returns)*100:.2f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
            reasonable_returns = all(-0.5 <= r <= 0.5 for r in returns)
            if reasonable_returns:
                print("   ‚úÖ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (¬±50%)")
            else:
                print("   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
            print(f"   –ü–µ—Ä–≤—ã–µ 5 –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π: {[f'{r:.4f}' for r in returns[:5]]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        print(f"\nüßÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞:")
        
        for result in results:
            ticker = result['ticker']
            returns = result['returns']
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            ticker_records = ticker_data[ticker]
            base_close_price = ticker_records[-1]['close']  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
            
            print(f"   {ticker}:")
            print(f"     –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_close_price}")
            print(f"     –¢–∏–∫–µ—Ä –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã: {ticker} ‚úÖ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç–æ–≤
            for i in range(min(3, len(returns))):
                expected_close = base_close_price * (1 + returns[i])
                print(f"     p{i+1}: {returns[i]:.6f} -> –æ–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞ ~{expected_close:.2f}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –≤—ã–≤–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        print(f"\nüìã CSV —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞:")
        csv_lines = []
        for result in results:
            ticker = result['ticker']
            returns = result['returns']
            csv_line = f"{ticker}," + ",".join([f"{r:.6f}" for r in returns])
            csv_lines.append(csv_line)
            print(f"   {csv_line}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        with open('multi_ticker_prediction_output.csv', 'w') as f:
            for line in csv_lines:
                f.write(line + '\n')
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: multi_ticker_prediction_output.csv")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    success = test_multiple_tickers_v2()
    if success:
        print("\nüéâ –¢–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
        print("‚úÖ –ö–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–æ–π!")
    else:
        print("\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        sys.exit(1)
