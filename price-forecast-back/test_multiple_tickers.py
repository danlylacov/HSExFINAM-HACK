#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /predict —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏
"""

import subprocess
import json
import sys
from collections import defaultdict

def test_multiple_tickers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /predict —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏")
    print("=" * 70)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º curl –∑–∞–ø—Ä–æ—Å
    try:
        result = subprocess.run([
            'curl', '-X', 'POST', 'http://localhost:8009/predict',
            '-H', 'Content-Type: application/json',
            '-d', '@test_multiple_tickers.json',
            '--max-time', '30',
            '-w', '\nHTTP Status: %{http_code}\nTotal Time: %{time_total}s\n',
            '--silent'
        ], capture_output=True, text=True, cwd='/home/daniil/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/FINAM_HACK/price-forecast-back')
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ curl: {result.stderr}")
            return False
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        output_lines = result.stdout.strip().split('\n')
        json_response = '\n'.join(output_lines[:-2])  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        metadata = output_lines[-2:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        
        try:
            response_data = json.loads(json_response)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"–û—Ç–≤–µ—Ç: {json_response}")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        ticker = response_data.get('ticker', 'UNKNOWN')
        returns = response_data.get('returns', [])
        
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –¢–∏–∫–µ—Ä –≤ –æ—Ç–≤–µ—Ç–µ: {ticker}")
        print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π: {len(returns)}")
        print(f"üìà –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata[0]}, {metadata[1]}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open('test_multiple_tickers.json', 'r') as f:
            input_data = json.load(f)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
        ticker_data = defaultdict(list)
        for record in input_data['params']:
            ticker_data[record['ticker']].append(record)
        
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(input_data['params'])}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {len(ticker_data)}")
        
        for ticker_name, records in ticker_data.items():
            print(f"   {ticker_name}: {len(records)} –∑–∞–ø–∏—Å–µ–π")
            last_record = records[-1]
            print(f"     –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {last_record['close']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ —Ç–∏–∫–µ—Ä–∞
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–∫–µ—Ä–∞:")
        print(f"   –¢–∏–∫–µ—Ä –≤ –æ—Ç–≤–µ—Ç–µ: {ticker}")
        print(f"   –¢–∏–∫–µ—Ä –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏: {input_data['params'][0]['ticker']}")
        
        if ticker == input_data['params'][0]['ticker']:
            print("   ‚úÖ –¢–∏–∫–µ—Ä –≤—ã–±—Ä–∞–Ω –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
        else:
            print("   ‚ö†Ô∏è  –¢–∏–∫–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
        base_close_price = input_data['params'][-1]['close']
        print(f"   –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {base_close_price}")
        print(f"   –¢–∏–∫–µ—Ä –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã: {input_data['params'][-1]['ticker']}")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
        print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker}:")
        print(f"{'–ü–µ—Ä–∏–æ–¥':<8} {'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å':<12} {'–ü—Ä–æ—Ü–µ–Ω—Ç':<10}")
        print("-" * 35)
        for i, ret in enumerate(returns[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            period = f"p{i+1}"
            percent = f"{ret*100:.2f}%"
            print(f"{period:<8} {ret:<12.6f} {percent:<10}")
        
        if len(returns) > 10:
            print(f"... –∏ –µ—â–µ {len(returns) - 10} –ø–µ—Ä–∏–æ–¥–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π:")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {min(returns):.6f} ({min(returns)*100:.2f}%)")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {max(returns):.6f} ({max(returns)*100:.2f}%)")
        print(f"   –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {sum(returns)/len(returns):.6f} ({sum(returns)/len(returns)*100:.2f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        reasonable_returns = all(-0.5 <= r <= 0.5 for r in returns)  # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±50%
        if reasonable_returns:
            print("   ‚úÖ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (¬±50%)")
        else:
            print("   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞
        print(f"\nüßÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤:")
        print(f"   –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_close_price}")
        print(f"   –¢–∏–∫–µ—Ä –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã: {input_data['params'][-1]['ticker']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç–æ–≤
        for i in range(min(3, len(returns))):
            expected_close = base_close_price * (1 + returns[i])
            print(f"     p{i+1}: {returns[i]:.6f} -> –æ–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞ ~{expected_close:.2f}")
        
        # –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π
        print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê –° –¢–ï–ö–£–©–ï–ô –†–ï–ê–õ–ò–ó–ê–¶–ò–ï–ô:")
        print(f"   ‚Ä¢ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞")
        print(f"   ‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ç–∏–∫–µ—Ä –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏: {ticker}")
        print(f"   ‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏: {input_data['params'][-1]['ticker']}")
        print(f"   ‚Ä¢ –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ä–∞—Å—á–µ—Ç–∞–º!")
        
        if ticker != input_data['params'][-1]['ticker']:
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–∏–∫–µ—Ä –æ—Ç–≤–µ—Ç–∞ ({ticker}) != –¢–∏–∫–µ—Ä –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã ({input_data['params'][-1]['ticker']})")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    success = test_multiple_tickers()
    if success:
        print("\nüéâ –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏–∫–æ–π!")
    else:
        print("\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        sys.exit(1)
