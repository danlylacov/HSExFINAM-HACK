#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /predict —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—è–º–∏
"""

import subprocess
import json
import sys

def test_returns_endpoint():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /predict (–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏)")
    print("=" * 70)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º curl –∑–∞–ø—Ä–æ—Å
    try:
        result = subprocess.run([
            'curl', '-X', 'POST', 'http://localhost:8009/predict',
            '-H', 'Content-Type: application/json',
            '-d', '@test_predict_data.json',
            '--max-time', '30',
            '-w', '\nHTTP Status: %{http_code}\nTotal Time: %{time_total}s\n',
            '--silent'
        ], capture_output=True, text=True, cwd='/home/daniil/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/FINAM_HACK/price-forecast-back')
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ curl: {result.stderr}")
            return False
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        output_lines = result.stdout.strip().split('\n')
        json_response = '\n'.join(output_lines[:-2])  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        metadata = output_lines[-2:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        
        try:
            response_data = json.loads(json_response)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"–û—Ç–≤–µ—Ç: {json_response}")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        ticker = response_data.get('ticker', 'UNKNOWN')
        returns = response_data.get('returns', [])
        
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –¢–∏–∫–µ—Ä: {ticker}")
        print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π: {len(returns)}")
        print(f"üìà –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata[0]}, {metadata[1]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:")
        if 'ticker' in response_data and 'returns' in response_data:
            print("   ‚úÖ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {ticker, returns}")
        else:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
            return False
        
        if len(returns) == 20:
            print("   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π: 20 (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
        else:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π: {len(returns)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 20)")
            return False
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π:")
        print(f"{'–ü–µ—Ä–∏–æ–¥':<8} {'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å':<12} {'–û–ø–∏—Å–∞–Ω–∏–µ':<20}")
        print("-" * 45)
        
        for i, ret in enumerate(returns[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            period = f"p{i+1}"
            description = "–†–æ—Å—Ç" if ret > 0 else "–ü–∞–¥–µ–Ω–∏–µ" if ret < 0 else "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            print(f"{period:<8} {ret:<12.6f} {description:<20}")
        
        if len(returns) > 10:
            print(f"... –∏ –µ—â–µ {len(returns) - 10} –ø–µ—Ä–∏–æ–¥–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π:")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {min(returns):.6f} ({min(returns)*100:.2f}%)")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {max(returns):.6f} ({max(returns)*100:.2f}%)")
        print(f"   –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {sum(returns)/len(returns):.6f} ({sum(returns)/len(returns)*100:.2f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞
        print(f"\nüßÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞:")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
        with open('test_predict_data.json', 'r') as f:
            input_data = json.load(f)
        
        base_close_price = input_data['params'][-1]['close']  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        print(f"   –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {base_close_price}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç–æ–≤
        print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤:")
        for i in range(min(3, len(returns))):
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Ü–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞)
            expected_close = base_close_price * (1 + returns[i])
            print(f"     p{i+1}: {returns[i]:.6f} -> –æ–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞ ~{expected_close:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        reasonable_returns = all(-0.5 <= r <= 0.5 for r in returns)  # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±50%
        if reasonable_returns:
            print("   ‚úÖ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (¬±50%)")
        else:
            print("   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    success = test_returns_endpoint()
    if success:
        print("\nüéâ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /predict –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {ticker, returns}!")
        print("‚úÖ –§–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–¥–∞—á–∏!")
    else:
        print("\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        sys.exit(1)
