#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /predict —Å curl –∏ –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import subprocess
import json
import sys

def test_predict_endpoint():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å curl"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /predict —Å curl")
    print("=" * 60)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º curl –∑–∞–ø—Ä–æ—Å
    try:
        result = subprocess.run([
            'curl', '-X', 'POST', 'http://localhost:8009/predict',
            '-H', 'Content-Type: application/json',
            '-d', '@test_predict_data.json',
            '--max-time', '30',
            '-w', '\nHTTP Status: %{http_code}\nTotal Time: %{time_total}s\n',
            '--silent'
        ], capture_output=True, text=True, cwd='/home/daniil/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/FINAM_HACK/price-forecast-back')
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ curl: {result.stderr}")
            return False
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        output_lines = result.stdout.strip().split('\n')
        json_response = '\n'.join(output_lines[:-2])  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        metadata = output_lines[-2:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        
        try:
            response_data = json.loads(json_response)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"–û—Ç–≤–µ—Ç: {json_response}")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        predictions = response_data.get('predictions', [])
        
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(predictions)}")
        print(f"üìà –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata[0]}, {metadata[1]}")
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
        print(f"{'–î–∞—Ç–∞':<12} {'Open':<8} {'High':<8} {'Low':<8} {'Close':<8} {'Volume':<10}")
        print("-" * 60)
        
        for i, pred in enumerate(predictions[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"{pred['date']:<12} {pred['open']:<8.2f} {pred['high']:<8.2f} {pred['low']:<8.2f} {pred['close']:<8.2f} {pred['volume']:<10.0f}")
        
        if len(predictions) > 10:
            print(f"... –∏ –µ—â–µ {len(predictions) - 10} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        opens = [p['open'] for p in predictions]
        highs = [p['high'] for p in predictions]
        lows = [p['low'] for p in predictions]
        closes = [p['close'] for p in predictions]
        volumes = [p['volume'] for p in predictions]
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
        print(f"   –¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: –º–∏–Ω={min(opens):.2f}, –º–∞–∫—Å={max(opens):.2f}, —Å—Ä–µ–¥–Ω–µ–µ={sum(opens)/len(opens):.2f}")
        print(f"   –¶–µ–Ω–∞ –º–∞–∫—Å–∏–º—É–º: –º–∏–Ω={min(highs):.2f}, –º–∞–∫—Å={max(highs):.2f}, —Å—Ä–µ–¥–Ω–µ–µ={sum(highs)/len(highs):.2f}")
        print(f"   –¶–µ–Ω–∞ –º–∏–Ω–∏–º—É–º: –º–∏–Ω={min(lows):.2f}, –º–∞–∫—Å={max(lows):.2f}, —Å—Ä–µ–¥–Ω–µ–µ={sum(lows)/len(lows):.2f}")
        print(f"   –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: –º–∏–Ω={min(closes):.2f}, –º–∞–∫—Å={max(closes):.2f}, —Å—Ä–µ–¥–Ω–µ–µ={sum(closes)/len(closes):.2f}")
        print(f"   –û–±—ä–µ–º: –º–∏–Ω={min(volumes):.0f}, –º–∞–∫—Å={max(volumes):.0f}, —Å—Ä–µ–¥–Ω–µ–µ={sum(volumes)/len(volumes):.0f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –¥–∞—Ç
        print(f"\nüóìÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç:")
        first_date = predictions[0]['date']
        last_date = predictions[-1]['date']
        print(f"   –ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞: {first_date}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {last_date}")
        print(f"   –ü–µ—Ä–∏–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {len(predictions)} –¥–Ω–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–∫–µ—Ä
        tickers = set(p['ticker'] for p in predictions)
        print(f"   –¢–∏–∫–µ—Ä—ã: {tickers}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    success = test_predict_endpoint()
    if success:
        print("\nüéâ –¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /predict –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 20 –≤—Ö–æ–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 20 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π!")
    else:
        print("\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        sys.exit(1)
