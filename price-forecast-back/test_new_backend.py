#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞ —Å –º–æ–¥–µ–ª—å—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
"""

import requests
import json
import time

def test_new_backend():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞"""
    base_url = "http://localhost:8009"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "params": [
            {
                "ticker": "AFLT",
                "date": "2025-01-01",
                "nn_news_sum": 1.2,
                "nn_news_mean": 0.03,
                "nn_news_max": 0.18,
                "nn_news_count": 43,
                "sentiment_mean": 0.5,
                "sentiment_sum": 20.0,
                "sentiment_count": 40,
                "sentiment_positive_count": 20,
                "sentiment_negative_count": 10,
                "sentiment_neutral_count": 10,
                "rsi": 50.0,
                "macd": 0.5,
                "cci": 0.0,
                "ema9": 100.0,
                "ema50": 100.0,
                "areThreeWhiteSoldiers": 0,
                "areThreeBlackCrows": 0,
                "doji": 0,
                "bearishEngulfing": 0,
                "bullishEngulfing": 0,
                "open": 100.0,
                "high": 105.0,
                "low": 95.0,
                "close": 102.0,
                "volume": 1000000
            },
            {
                "ticker": "AFLT",
                "date": "2025-01-02",
                "nn_news_sum": 1.5,
                "nn_news_mean": 0.04,
                "nn_news_max": 0.20,
                "nn_news_count": 45,
                "sentiment_mean": 0.6,
                "sentiment_sum": 25.0,
                "sentiment_count": 42,
                "sentiment_positive_count": 25,
                "sentiment_negative_count": 8,
                "sentiment_neutral_count": 9,
                "rsi": 55.0,
                "macd": 0.6,
                "cci": 0.1,
                "ema9": 101.0,
                "ema50": 100.5,
                "areThreeWhiteSoldiers": 0,
                "areThreeBlackCrows": 0,
                "doji": 0,
                "bearishEngulfing": 0,
                "bullishEngulfing": 0,
                "open": 102.0,
                "high": 107.0,
                "low": 97.0,
                "close": 104.0,
                "volume": 1200000
            }
        ]
    }
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞ —Å –º–æ–¥–µ–ª—å—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")
        response = requests.get(f"{base_url}/health", timeout=10)
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ API –∑–¥–æ—Ä–æ–≤: {health_data}")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
        response = requests.post(
            f"{base_url}/predict",
            json=test_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if response.status_code == 200:
            predictions = response.json()
            print(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: {len(predictions['predictions'])} —Å–≤–µ—á–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            first_prediction = predictions['predictions'][0]
            print(f"\nüìä –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")
            print(f"   –î–∞—Ç–∞: {first_prediction['date']}")
            print(f"   Open: {first_prediction['open']:.2f}")
            print(f"   High: {first_prediction['high']:.2f}")
            print(f"   Low: {first_prediction['low']:.2f}")
            print(f"   Close: {first_prediction['close']:.2f}")
            print(f"   Volume: {first_prediction['volume']:.0f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
            last_close = test_data['params'][-1]['close']
            predicted_close = first_prediction['close']
            return_rate = (predicted_close / last_close) - 1
            
            print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {last_close:.2f}")
            print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {predicted_close:.2f}")
            print(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {return_rate:.4f} ({return_rate*100:.2f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            if abs(return_rate) < 0.2:  # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 20%
                print("‚úÖ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
            else:
                print("‚ö†Ô∏è  –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π")
            
            return True
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    success = test_new_backend()
    if success:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
